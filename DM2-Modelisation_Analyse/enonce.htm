
<!DOCTYPE html>
<!--[if lt IE 7]>
<html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>
<html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>
<html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js"> <!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>IFT 3911 - Hiv 2024</title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Place favicon.ico and apple-touch-icon.png in the root directory -->

    <link rel="stylesheet" href="http://www-labs.iro.umontreal.ca/~syriani/cside/css/normalize.css">
    <link rel="stylesheet" href="http://www-labs.iro.umontreal.ca/~syriani/cside/css/main.css">
    <script src="http://www-labs.iro.umontreal.ca/~syriani/cside/js/vendor/modernizr-2.6.2.min.js"></script>

    <link rel="stylesheet" href="http://www-labs.iro.umontreal.ca/~syriani/cside/css/uj.css">
    <script type="application/javascript" src="http://www-labs.iro.umontreal.ca/~syriani/cside/js/main.js"></script>
</head>
<body>
<!--[if lt IE 7]>
<p class="browsehappy">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">
    upgrade your browser</a> to improve your experience.</p>
<![endif]-->

<!-- Add your site or application content here -->
<div id="main" style="width: 95%;">
    <div id="header">
    </div>
    <div id="title">
        IFT 3911 - Hiv 2024<br>Devoir maison 2    </div>
    <div id="content"><div class="box">
<h1>Modélisation et analyse</h1>

<p>
  Ce devoir comporte trois parties indépendantes.
  Vous devez modéliser un système en un réseau de Pétri et analyser certaines de ses propriétés.
  Vous devez modéliser un autre système en un Statechart et générer le code et l'intégrer dans une application.
  Vous devez améliorer la qualité du design du devoir 1 en révisant les modèles UML et analysant leur qualité orienté-objet.
</p>

<h2>Réseau de Pétri: Tunnel</h2>

<p>
  Le système est un tunnel qui connecte Montréal à la rive Sud. Les voitures entrent dans le tunnel de chaque côté et en sortent du côté opposé.
  Il y a deux voies: une de Montréal à la rive Sud et une autre dans le sens inverse. Votre modèle doit avoir une place pour chaque voie qui représente la présence d'une voiture à l'entrée du tunnel. On suppose un flux continu de voitures. Donc il doit y avoir une voiture à chaque entrée en tout temps.
</p>
<p>
  Comme il y a de la construction dans le tunnel, seule une voiture peut être à l'intérieur du tunnel à la fois.
</p>
<p>
  Le système n'est pas équitable car on remarque qu'une voie est bloquée tout le temps par l'autre. On introduit une lumière de chaque côté qui permet de faire passer une voiture à la fois de chaque côté de manière équitable.
</p>

<h2>Statechart: Four à micro-onde</h2>

<p>
  Le système est l'interface d'un four à micro-onde simplifié. Le panneau de contrôle est doté des composants suivants:
  <ul>
    <li>Bouton <i>High</i> indique une cuisson à puissance forte, lance l'événement <code>high</code></li>
    <li>Bouton <i>Low</i> indique une cuisson à puissance faible, lance l'événement <code>low</code></li>
    <li>Bouton <i>Timer</i> permet d'inscrire le temps de cuisson, lance l'événement <code>timer</code></li>
    <li>Bouton <i>Start</i> démarre la cuisson, lance l'événement <code>start</code></li>
    <li>Bouton <i>Stop</i> arrête tout le processus, lance l'événement <code>stop</code></li>
    <li>Bouton <i>Open</i> ouvre la porte du four, lance l'événement <code>open</code></li>
    <li>Bouton <i>Close</i> ferme la porte du four, lance l'événement <code>close</code></li>
    <li>Dix touches numériques pour entrer la durer de cuisson, chacun lance l'événement <code>digit</code> sous forme d'un entier correspondant au chiffre de la touche. Vous pouvez accéder au chiffre avec <code>valueof(digit)</code></li>
    <li>Afficheur alphanumérique pour afficher la puissance, le temps de cuisson restant ou des messages</li>
  </ul>
</p>
<p>
  Pour procéder à une cuisson, on sélectionne d'abord la puissance de cuisson. Si on se trompe de puissance on peut choisir l'autre et vice versa. Appuyer sur le bouton <i>high</i> affiche le message 'High' et appuyer sur le bouton <i>low</i> affiche le message 'Low'. Une fois la puissance choisie, on sélectionne le <i>timer</i> et on entre le temps de cuisson. Le temps contient au maximum quatre chiffres (représentant le temps de cuisson en secondes). On démarre la cuisson en appuyant sur <i>start</i>. L'afficheur affiche le compte à rebours. À la fin de la cuisson, le message 'Finished' est affiché et, pendant 5 secondes, une sonnerie retentie et l'afficheur clignote.
</p>
<p>
  La porte peut être ouverte ou fermée en tout temps. Pour des raisons de sécurité, la cuisson ne peut avoir lieu si la porte est ouverte. Durant la cuisson, l'ouverture de la porte interrompt la cuisson. Le message 'Waiting' est alors affiché. Lorsque la porte est refermée, l'afficheur affiche le texte précédent l'ouverture (message ou temps). Si on était en mode cuisson, appuyer sur <i>start</i> reprend la cuisson avec le temps restant.
</p>
<p>
  Appuyer sur <i>stop</i> arrête tout le processus et met le système au repos.
</p>

<h4>Implémentation fournie</h4>

<p>
L'implémentation de l'application vous est fournie. Vous pouvez télécharger le projet Yakindu <code>Microwave.zip</code> à partir de la page de soumission du devoir dans StudiUM.
</p>
<p style="text-align: center; font-size: xx-large;">
  <img src="http://www-labs.iro.umontreal.ca/~syriani/courses/IFT3911-2024H/A2/screenshot.png" width="400px"/>
  &nbsp;&nbsp;&nbsp;&nbsp;
  <img src="http://www-labs.iro.umontreal.ca/~syriani/courses/IFT3911-2024H/A2/statechart.png"/>
</p>
<p>
  L'implémentation inclut un Statechart de base (voir image) sous <code>Microwave/model/microwave.sct</code>.
  L'interface avec le reste de l'application est déjà fournie: les événements et les opérations. <b>Vous ne pouvez pas changer celle-ci.</b> Cependant, vous pouvez ajouter des éléments dans la partie <code>internal</code> qui représente les données et événements internes au Statechart. Un Statechart de base vous est fourni à titre d'exemple seulement.
</p>
<p>
  Le code de toute l'application est déjà présent. Le code généré à partir du Statechart s'intègre complètement dans l'application. Les opérations définies dans l'interface publique du Statechart sont implémentées dans la classe <code>MicrowaveUI</code>.
  La documentation, qui se trouve sous <code>Microwave/doc/index.html</code>, explique le comportement de chaque opération. <b>Vous ne pouvez pas changer le code existant.</b> Notez que si vous utilisez une transition temporelle (p.ex. <code>after 1s</code>), vous devez enlever le commentaire de la ligne 36 de la class <code>Microwave/src/microwave/MicrowaveApp.java</code>.
</p>

<p>
  Les opérations de l'interface du Statechart, déjà fournies, sont :
  <ul>
    <li><code>beepOff():</code> assombrit l'afficheur</li>
    <li><code>beepOn():</code> éclarcit l'afficheur et émet un son</li>
    <li><code>clearDisplay():</code> Inscrit <code>" : "</code> sur l'afficheur</li>
    <li><code>closeDoor():</code> Ferme la porte du four</li>
    <li><code>cook():</code> effectue la cuisson</li>
    <li><code>display(String msg):</code> inscrit le message <code>msg</code> sur l'afficheur</li>
    <li><code>displayTime(long t):</code> inscrit le temps de cuisson sur l'afficheur en format <code>XX:XX</code></li>
    <li><code>openDoor():</code> ouvre la porte du four</li>
    <li><code>stopCook():</code> arrête la cuisson</li>
  </ul>
  La variable <code>power</code> peut être utilisée pour assigner la puissance de cuisson (1 pour haute, 2 pour faible).
  Vous pouvez ajouter d'autres variables internes, par exemple pour calculer et conserver le temps de cuisson.
</p>


<h1>Tâches</h1>

<ol>
  <li>
    Modélisez le système du tunnel à l'aide d'un réseau de Pétri qui satisfait toutes les consignes. Les consignes sont formulées sous forme d'incréments. Il est plus facile de le construire dans cet ordre.
    Démontrez, à l'aide de lois de conservations, que seule une voiture peut être à l'intérieur du tunnel à la fois.
    Démontrez, à l'aide du graphe de couverture, que le système est équitable de part et d'autre du tunnel.
    Déduisez-en qu'il n'y a pas de famine dans le réseau.
  </li>
  <li>
    Modélisez le système du four à micro-onde à l'aide d'un Statechart. Vous n'avez qu'à modifier le modèle <code>Microwave/model/microwave.sct</code> et générer le code en cliquant droit sur <code>Microwave/model/java.sgen</code> et cliquer sur <i>Generate Code Artifacts</i>. Pour exécuter le programme, il faut exécuter la classe <code>Microwave/src/microwave/MicrowaveApp.java</code>. Lors de la correction, nous allons regénérer le code Java à partir de votre Statechart. Donc toute modification dans le code ne sera pas prise en compte.
  </li>
  <li>
    Cette tâche est reliée au système de réservation du devoir 1.
    Révisez votre design afin qu'il soit de bonne qualité en utilisant les techniques vues en classe.
    Votre design doit être modulaire et réutilisable.
    Identifiez clairement les modules à usage général et réutilisables dans le rapport.
  </li>
  <li>
    Dans cette tâche, vous devez démontrer la qualité du design de la tâche 3.
    Identifiez clairement les modules à usage général et réutilisables dans le rapport.
    Vous devez justifier votre raisonnement en vous appuyant sur le couplage et la cohésion des classes et paquets, la relation entre le fardeau et le domaine des classes.
    Identifiez clairement le type de couplage ou de cohésion concerné.
    Vous devez également produire un graphe IA montrant la stabilité et le niveau d'abstraction de chaque paquet.
    Justifier l'allure du graphe obtenu.
    Vous devez identifier les principes de conception que vous avez appliqués dans votre design et justifiez leur utilisation (ou absence).
  </li>
</ol>

<h1>Barème</h1>

<ul>
  <li>Réseau de Pétri [25%]
    <ul>
      <li>Modélisation du réseau de Pétri [15%]</li>
      <li>Analyse du réseau de Pétri [10%]</li>
    </ul>
  </li>
  <li>Statechart [30%]
    <ul>
      <li>Modélisation du Statechart [25%]</li>
      <li>Génération du code et application fonctionnelle [5%]</li>
    </ul>
  </li>
  <li>Design logiciel [25%] :
    <ul>
      <li>Révision du diagramme de classe [5%]</li>
      <li>Révision des diagrammes de séquence ou de collaboration [5%]</li>
      <li>Révision du diagramme de paquets [5%]</li>
      <li>Révision des contraintes OCL [5%]</li>
      <li>Identification des modules réutilisables [5%]</li>
    </ul>
  </li>
  <li>Qualité du design [20%]
    <ul>
      <li>Discussion du couplage et de la cohésion des modules [5%]</li>
      <li>Discussion du fardeau des classes [5%]</li>
      <li>Graphe IA et justification [5%]</li>
      <li>Justification de l'application des principes de conception [5%]</li>
    </ul>
  </li>
</ul>
<p>
  Téléversez toutes les images (incluant celles des diagrammes UML, du réseau de Pétri et du Statechart), fichiers source, fichiers de données, projet vpp, et y faire référence dans le rapport.
  Le fichier ZIP doit comprendre trois dossiers : Design, Réseau de Petri et Statechart.
</p>

<h1>Ressources supplémentaires</h1>

<p>
  Vous devez utiliser <a href="https://ap.visual-paradigm.com/university-of-montreal">Visual Paradigm</a> pour tous les diagrammes UML.
  Vous pouvez le télécharger et l'installer.
  La clé pour la licence est disponible sur StudiUM.
  Vous devez utiliser <a href="https://updates.yakindu.org/statecharts/products/professional/3.5.9/">Yakindu</a> pour l'exercice de Statechart.
  Vous pouvez le télécharger et l'installer.
  Toute la documentation et des exemples sont disponibles <a href="https://www.itemis.com/en/products/itemis-create/documentation/user-guide">en ligne</a>.
</p>

<h1>Informations pratiques</h1>

<p>Le devoir vaut 13% de la note finale.</p>

<p>Voir la date de remise sur StudiUM à 23h55. Tout retard engendrera une pénalité de 5% par jour pour un maximum de deux jours.</p>

<p>Le devoir est à faire en équipe d'au plus trois.</p>

<p>
  La remise du devoir est un fichier ZIP qui comprend un fichier HTML simple (rapport.htm) ainsi que tous les fichiers additionnels nécessaires (.jpg, .java, .txt, .vpp, tous les autres fichiers que vous voulez remettre).
  Le rapport doit faire référence de manière explicite à tous les fichiers et inclure toutes les images directement visibles sur la page.
  Vous devez inscrire dans l'entête du rapport : le nom de tous les membres de votre équipe, les quatre derniers chiffres de vos matricules, vos courriels et le temps mis par chaque membre sur le devoir (pour des raisons statistiques uniquement).
  Votre solution doit être incluse en entier dans le body du rapport. Inscrivez toutes vos hypothèses.
  Puis décrivez votre solution pour chaque tâche sous forme de rapport.
</p>

<p>
  De plus, le rapport doit inclure une section Distribution des tâches.
  Cette section doit énumérer toutes les tâches accomplies et le pourcentage de contribution de chaque membre par tâche.
  Si les pourcentages ne sont pas plus ou moins égaux, la note peut différer d'un membre à l'autre.
  <a href="http://www-labs.iro.umontreal.ca/~syriani/courses/rapport.htm">Vous pouvez trouver un exemple du rapport ici</a>.
</p>

<p>
  Une seule personne par équipe remet le devoir complet sur StudiUM.
	Les autres membres doivent <b>absolument valider la remise sur StudiUM</b> pour que la soumission soit confirmée.
  Indiquez la personne qui soumet le devoir complet.
</p>

<p>Omettre le rapport engendrera une pénalité de 5%.</p>
</div>
</div>

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script>window.jQuery || document.write('<script src="js/vendor/jquery-1.10.2.min.js"><\/script>')</script>
<script src="js/plugins.js"></script>
<script src="js/main.js"></script>

<!-- Google Analytics: change UA-XXXXX-X to be your site's ID. -->
<script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-52916909-1', 'auto');
    ga('send', 'pageview');

</script>
</body>
</html>
