<!DOCTYPE html>

<html>
<head>
    <title>IFT3911 DM1 - Hiv24</title>
    <style type="text/css">
        table
        {
            border: outset 2px black;
            border-collapse: collapse;
        }
        th
        {
            border-bottom: double 2px black;
        }
        td
        {
            border-bottom: solid 1px black;
        }
        .first_col
        {
            border-right: double 2px black;
        }
        .todo
        {
            color: red;
        }
        .extension dt
        {
            margin-left: 25px;
        }
        dl.extension > ol
        {
            margin-left: 25px;
        }
    </style>
</head>

<body>
    <h1 style="text-align: center;">
        IFT 3911 - Devoir 1</h1>

    <h2>
        Information générale</h2>

    <p>
        <span style="font-weight: bold;">Nom: </span>Killian Gervais
        <br />
        <span style="font-weight: bold;">Matricule: </span>1841
        <br />
        <span style="font-weight: bold;">Courriel: </span>killian.gervais@umontreal.ca
        <br />
        <span style="font-weight: bold;">temps mis: </span>X heures
    </p>

    <p class=""todo>
        <span style="font-weight: bold;">Nom: </span>John Smith
        <br />
        <span style="font-weight: bold;">Matricule: </span>5678
        <br />
        <span style="font-weight: bold;">Courriel: </span>john.smith@something.com
        <br />
        <span style="font-weight: bold;">temps mis: </span>40 heures
    </p>

    <p class=""todo>
        <span style="font-weight: bold;">Nom: </span>John Smith
        <br />
        <span style="font-weight: bold;">Matricule: </span>5678
        <br />
        <span style="font-weight: bold;">Courriel: </span>john.smith@something.com
        <br />
        <span style="font-weight: bold;">temps mis: </span>40 heures
    </p>

    <h2>
        Distribution des tâches</h2>

    <p class="todo">
        <span style="font-weight: bold;">Soumetteur: </span>XXXXXXX
    </p>

    <table class="todo" scellpadding="7px">
        <thead>
            <tr>
                <th class="first_col">
                    Tâche
                </th>
                <th>
                    Killian
                </th>
                <th>
                    Roman
                </th>
                <th>
                    Tobias
                </th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td class="first_col">
                    Diagramme de classe
                </td>
                <td>
                    Classes, associations, attributs (50%)
                </td>
                <td>
                    Methodes, contraintes (50%)
                </td>
                <td>
                    Methodes, contraintes (50%)
                </td>
            </tr>

            <tr>
                <td class="first_col">
                    Implémentation
                </td>
                <td>
                    GUI (30%)
                </td>
                <td>
                    Logique (70%)
                </td>
                <td>
                    Logique (70%)
                </td>
            </tr>
        </tbody>
    </table>

    <h2 class="todo">
        Hypothèses</h2>

    <p class="todo">
        J'ai supposé que...
    </p>

    <h2 class="todo">
        Tâche 1</h2>

    <p class="todo">
        <ul>
            <li>
                <u>Scénario pour la suppression d'une compagnie aerienne:</u>
                <ol>
                    <li>L'administrateur choisit l'option "Gestion des compagnies aériennes" dans le menu principal</li>
                    <li>L'administrateur choisit l'option "Supprimer une compagnie aérienne"</li>
                    <li>Le système demande de rentrer le nom de la compagnie aérienne à supprimer ou de la choisir parmi la liste affichée</li>
                    <li>L'administrateur choisit la compagnie aérienne à supprimer ou rentre son nom</li>
                    <li>Le système affiche les données de la compagnie aérienne correspondante et demande à l'administrateur de confirmer la suppression de celle-ci</li>
                    <li>L'administrateur confirme la suppression à l'aide de l'option "supprimer"</li>
                    <li>Le système affiche un message de confirmation de la suppression de la compagnie aérienne</li>
                    <li>L'administrateur ferme le message de confirmation à l'aide de l'option "ok"</li>
                    <li>Le système retourne à l'étape 3.</li>
                </ol>
                <br/>
                <u>Extensions:</u>
                <dl class="extension">
                    <dt>4a. Le nom de compagnie aérienne rentré par l'administrateur n'est pas dans le système:</dt>
                    <ol>
                        <li>Le système affiche un message d'erreur contenant l'entrée de l'administrateur</li>
                        <li>L'administrateur ferme le message d'erreur à l'aide de l'option "ok"</li>
                        <li>Retour à l'étape 3.</li>
                    </ol>
                    <br/>
                    <dt>6a. L'administrateur ne veut pas supprimer cette compagnie aérienne:</dt>
                    <ol>
                        <li>L'administrateur utilise l'option "retour"</li>
                        <li>Le système retourne à l'étape 3.</li>
                    </ol>
                </dl>
            </li>
            <br/>
            <li>
                <u>Scénario pour la vérification des vols/trajets:</u>
                <ol>
                    <li>Le client choisit l'option "Recherche de vols" dans le menu principal</li>
                    <li>Le système affiche le menu de recherche de vols</li>
                    <li>Le client rentre l'aéroport d'origine, la destination, la date du vol ainsi que la classe souhaitée dans les emplacements correspondants</li>
                    <li>Le système vérifie la validité des entrées du client</li>
                    <li>Les entrées sont valides</li>
                    <li>Le système affiche la liste des vols correspondants et les détails de ceux-ci: date et heure de départ, durée du vol, heure d'arrivée, compagnie aérienne, numéro du vol, prix, nombre de sièges disponibles pour la section</li>
                </ol>
                <br/>
                <u>Extensions:</u>
                <dl class="extension">
                    <br/>
                    <dt>4a. Une ou des entrées sont invalides:</dt>
                    <ol>
                        <li>Le système affiche un message d'erreur indiquant les entrées invalide du client</li>
                        <li>Le client confirme qu'il a lu le message</li>
                        <li>Le système retourne à l'étape 2.</li>
                    </ol>
                    <br/>
                    <dt>5a. Il n'y a pas de vols correspondants à la recherche</dt>
                    <ol>
                        <li>Le système affiche un message indiquant qu'il n'a pas trouvé de vols correspondants à la recherche du client</li>
                        <li>Le client confirme qu'il a lu le message</li>
                        <li>Le système retourne à l'étape 2.</li>
                    </ol>
                </dl>
                <br/>
                <i>Note: Le scénario pour la vérification des trajets est obtenu en changeant vol par trajet de train, aéroport par gare et aérienne par ferroviaire.</i>
            </li>
            <br/>
            <li>
                <u>Scénario pour la vérification des itinéraires:</u>
                <ol>
                    <li>Le client choisit l'option "Recherche des itinéraires de croisière" dans le menu principal</li>
                    <li>Le système affiche le menu de recherche des itinéraires</li>
                    <li>Le client rentre le port d'origine, la date du départ ainsi que la classe souhaitée dans les emplacements correspondants</li>
                    <li>Le système vérifie la validité des entrées du client</li>
                    <li>Les entrées sont valides</li>
                    <li>Le système affiche la liste des vols correspondants et les détails de ceux-ci: date, durée total, compagnie de croisière, numéro de l'itinéraire, prix, nombre de cabines disponibles pour la section</li>
                </ol>
                <br/>
                <u>Extensions:</u>
                <dl class="extension">
                    <br/>
                    <dt>4a. Une ou des entrées sont invalides:</dt>
                    <ol>
                        <li>Le système affiche un message d'erreur indiquant les entrées invalide du client</li>
                        <li>Le client confirme qu'il a lu le message</li>
                        <li>Le système retourne à l'étape 2.</li>
                    </ol>
                    <br/>
                    <dt>5a. Il n'y a pas d'itinéraires correspondants à la recherche</dt>
                    <ol>
                        <li>Le système affiche un message indiquant qu'il n'a pas trouvé d'itinéraires de croisière correspondants à la recherche du client</li>
                        <li>Le client confirme qu'il a lu le message</li>
                        <li>Le système retourne à l'étape 2.</li>
                    </ol>
                </dl>
            </li>
        </ul>
    </p>

    <ul class="todo">
        <li>Voici un <a href="file1.txt">lien</a> vers les fichiers.</li>
        <li>Images affichées directement.</li>
    </ul>

    <img src="http://www.desktopwallpaperhd.net/wallpapers/19/5/islands-paradise-maldive-nature-background-image-landscape-194469.jpg"
        width="500px" alt="some image" />

    <h2 class="todo">
        Tâche 2</h2>
        <h2>Justifications</h2>
    <h3>Diagramme de classe domaine</h3>
    <ul>
        
        <li>Description trajet : Change a DescriptionTrajet car cela correspond plus que Trajet

            date et heureDepart  sont combine grace au format de Date en java
            
            dateArrivee devient dateArrivee pour constance
            
            duree est derivee de dateDepart et dateArrivee
            
            nomCompagnie change a compagnie de type Compagnie pour faciliter acces aux informations de cette derniere
            
            on ne considere pas idTrajet comme un attribut derivee meme s'il depend partiellement de compagnie
            
            on ommet les getters et setters que l'on considere necessaire par soucis d'espace mais ceux-ci doivent etre present dans l'implementation</li>
        <li>Installations : ajout de nom et de pays pour une meilleure precision de l'objet en question</li>
        <li>Section : heritage au lieu d'enum, permet plus de flexibilite dans la generalisation</li>
        <li>Siege : position allee ou fenetre implicite par colonne

            Avion: nb siege max est une constante
            
            Heritage pour type de siege, meme logique que pour les sections</li>
    </ul>
    <h3>Diagrammes de séquences</h3>
    <h4>Vérifier trajet</h4>
    <ul>
        <li>chercher trajet retourne les trajets correspondants à origine,destination et date
            la boucle s'occupe de savoir lesquels ont
            encore des places libres
        <li>On cherche à savoir quels sont les trajets disponibles et qui 
            ont encore de la place. La méthode isBooked permet de ne renvoyer que les trajets qui en ont</li>
        
    </ul>
    <h4>Réserver siège  / emplacement</h4>
    <ul>
        
        <li>On considère que la réservation a déjà été faite, le client n'a qu'a sélectionner le siège puisque il y'en a dans la section choisie</li>
        <li>L'emplacement devient available lorsque sélectionné</li>
    </ul>
    <h4>Payer trajet</h4>
    <ul>
        
        
    </ul>

    <p class="todo">
        ...
    </p>


    <h2 class="todo">Tâche 3</h2>

    <p>
        <ul>
            <li>Une installation (aéroport, port, gare) est identifié par trois lettres uniques à chaque installation</li>
            <pre>
                <code>
                    context Installation inv:
                        Installation.allInstances()->forAll(c1, c2 |
                            (c1 <> c2 and c1.oclIsKindOf(c2.OclType())) implies c1.code <> c2.code)
                </code>
            </pre>

            <li>La partie alphabétique de l'ID d'un vol est unique à chaque compagnie et la partie numérique est unique à chaque vol au sein de la même compagnie</li>
            <pre>
                <code>
                    context Vol
                        inv: 
                </code>
            </pre>

            <li>L'aéroport de départ et d'arrivée d'un vol doit être différent</li>
            <pre>
                <code>
                    context DescriptionVol inv:
                        self.origine <> self.destination
                </code>
            </pre>
            
            <li>Tous les emplacements (sièges, cabines) d'une même section ont le même prix</li>
            <pre>
                <code>
                    context Section::listeEmplacement
                        self.allInstances()->forAll(e1, e2 | e1.prix = e2.prix)
                </code>
            </pre>

            <li>Un itinéraire ne peut pas durer plus de 21 jours</li>
            <pre>
                <code>
                    context DescriptionItineraireMarin inv:
                        self.duree <= 21
                </code>
            </pre>

            <li>Le port de départ et d'arrivée doit être le même</li>
            <pre>
                <code>
                    context DescriptionItineraireMarin inv:
                        self.origine = self.destination
                </code>
            </pre>

            <li>Un paquebot peut être assigné à plusieurs itinéraires tant qu'ils ne se chevauchent pas</li>
            <pre>
                <code>
                    context Croisiere inv:
                        Croisiere.allInstances()->forAll(c1, c2 | 
                            c1 <> c2 and c1.Assigne-a = c2.Assigne-A implies
                                (c1.dateArrivee <= c2.dateDepart or c1.dateDepart >= c2.dateArrivee))
                </code>
            </pre>
            
            <li>Le client peut réserver un siège disponible dans un vol (trajet) donné</li>
            <pre>
                <code>
                    context Emplacement
                        if self.disponible = true
                        then (t:Trajet, r:Reservation | r.reserverTajet(t) = true)
                        else false
                        endif 
                        
                </code>
            </pre>

            <li>Le client peut réserver une cabine disponible pour un itinéraire donné</li>
            <pre>
                <code>
                    
                </code>
            </pre>

            <li>Un siège réservé devient assigné à un passager une fois payé: le siège est donc confirmé</li>
            <pre>
                <code>
                    context Reservation inv:
                        if self.estPaye()
                        then self.emplacement.attitreA = self.client
                </code>
            </pre>
        </ul>
    </p>
    
</body>
</html>
